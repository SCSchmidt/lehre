install.packages("archdata")
install.packages("YaRrr")
install.packages("Yarrr")
install.packages("YaRr")
install.packages("yarrr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("
tidyr")
install.packages("tidyr")
#install.packages("tidyr")
#install.packages("dplyr")
#brauchen wir später, drum installiert es doch gleich am Anfang.
library(tidyr)
install.packages("tidyr")
uninstall.packages("tidyr")
install.packages("installr")
Bornh2 <-  gather(Bornh1, key = "Typ", value = "Haeufigkeit", "N2c":"A2e") # das ist der Code der die Umformung vornimmt.
install.packages("tidyverse")
knitr::opts_chunk$set(
collapse = TRUE,
warning = FALSE,
message = FALSE,
echo = TRUE,
comment = "#>",
fig.path = "../figures/",
fig.width=6,
fig.height=6
)
library(archdata)
data("BACups")
data("Fibulae")
data("Acheulean")
data("Bornholm")
data("Snodgrass")
data("EndScrapers
View(Acheulean)
View(BACups)
cor.test(BACups$RD, BACups$ND, method = "pearson", alternative = "two.sided")
ggplot(data = BACups)+
geom_point(aes(x = RD, y = ND))
library(ggplot2)
ggplot(data = BACups)+
geom_point(aes(x = RD, y = ND))
ggplot(data = BACups)+
geom_point(aes(x = RD, y = ND))+
geom_smooth(method = "lm",
se = FALSE)
geom_smooth((aes(x = RD, y = ND), method = "lm",
ggplot(data = BACups)+
geom_point(aes(x = RD, y = ND))+
geom_smooth( aes(x = RD, y = ND), method = "lm",
se = FALSE)
ggplot(data = BACups)+
geom_point(aes(x = RD, y = ND))+
geom_smooth( aes(x = RD, y = ND), method = "lm",
se = TRUE)
library(ggpmisc)
install.packages"(ggpmisc")
install.packages("ggpmisc")
library(ggpmisc)
ggplot(data = BACups)+
geom_point(aes(x = RD, y = ND))+
geom_smooth( aes(x = RD, y = ND), method = "lm",
se = TRUE)+
stat_poly_eq(aes(label =  paste(..eq.label..,
..adj.rr.label..,
sep = "~~~~")),
formula = y~x,
parse = TRUE,
size = 3,
label.y.npc = 0.7) +
ggplot(data = BACups)+
geom_point(aes(x = RD, y = ND))+
geom_smooth( aes(x = RD, y = ND), method = "lm",
se = TRUE)+
stat_poly_eq(aes(label =  paste(..eq.label..,
..adj.rr.label..,
sep = "~~~~")),
formula = y~x,
parse = TRUE,
size = 3,
label.y.npc = 0.7)
ggplot(data = BACups)+
geom_point(aes(x = RD, y = ND))+
geom_smooth( aes(x = RD, y = ND), method = "lm",
se = TRUE)+
stat_poly_eq(aes(x = RD, y = ND, label =  paste(..eq.label..,
..adj.rr.label..,
sep = "~~~~")),
formula = y~x,
parse = TRUE,
size = 3,
label.y.npc = 0.7)
source('~/.active-rstudio-document', echo=TRUE)
sqrt(9)
knitr::opts_chunk$set(echo = TRUE,
include = TRUE)
library(bookdown)
library("archdata")
data("BACups")
# Create histogram of rim diameter of bronze age cups, colour differentiated by phase
ggplot()+
geom_histogram(data = BACups, aes(x = RD, fill = Phase),
binwidth = 2, # Klassengröße 100g zeigt klare Verteilungsstrukturen
na.rm = TRUE) # zwei NA-Sätze müssen entfernt werden
library(ggplot2)
# Create histogram of rim diameter of bronze age cups, colour differentiated by phase
ggplot()+
geom_histogram(data = BACups, aes(x = RD, fill = Phase),
binwidth = 2, # Klassengröße 100g zeigt klare Verteilungsstrukturen
na.rm = TRUE) # zwei NA-Sätze müssen entfernt werden
# Create histogram of rim diameter of bronze age cups, colour differentiated by phase
ggplot()+
geom_histogram(data = BACups, aes(x = RD, fill = Phase),
binwidth = 1, # Klassengröße 100g zeigt klare Verteilungsstrukturen
na.rm = TRUE) # zwei NA-Sätze müssen entfernt werden
library(archdata)
data(Snodgrass)
knitr::opts_chunk$set(echo = TRUE,
include = TRUE)
Snodgrass %>%
select(East,
South)
library(dplyr)
library(magrittr)
Snodgrass %>%
select(East,
South)
Snodgrass %>%
select_if(is.numeric())
Snodgrass %>%
select_if(is.numeric)
Snodgrass %>%
filter(Ceramics > 1)
Snodgrass %>%
select_if(is.integer)
Snodgrass %>%
select_if(is.factor) %>%
filter(Effigies > 0)
Snodgrass %>%
filter(Effigies > 0)%>%
select_if(is.factor)
library(ggplot2)
data("Bornholm")
?Bornholm
ggplot(Bornholm)+
geom_bar(aes(x = Period))
library(openxlsx)
install.packages("xlsx")
?openxlsx
write.xlsx(Snodgrass, "../data/derived_data/Snodgrass.xlsx")
write.xlsx(Snodgrass, "../data/Snodgrass.xlsx")
write.xlsx(Snodgrass, "../data/derived_data/Snodgrass.xlsx")
knitr::opts_chunk$set(echo = TRUE,
include = TRUE)
chi2 <- chisq.test(table(EWBurials$Sex, EWBurials$Goods))
BACups %>%
filter(Phase == "Protoapennine") %>% # take only the protoapennine data
use_series(RD)%>% # take the RD column
ggqqplot() #draw the qqplot.
library(dplyr)
library(dplyr)
library(magrittr)
BACups %>%
filter(Phase == "Protoapennine") %>% # take only the protoapennine data
use_series(RD)%>% # take the RD column
ggqqplot() #draw the qqplot.
BACups %>%
filter(Phase == "Subapennine") %>%
use_series(RD)%>%
ggqqplot()
knitr::opts_chunk$set(echo = TRUE,
include = TRUE)
# number of Neolithic graves
nl_G <- c(10,50)
# the probability they should follow (area percentage in the working area
Vert_fl <- c(0.404,0.596)
# test is run by:
chisq.test(nl_G, p = Vert_fl)
# don't forget the "p =" as I did first! ;-)
# I'll just call the variable chi
chi <- chisq.test(nl_G, p = Vert_fl)
chi$expected
chi$p.value
#  let's look at the table
table(EWBurials$Sex, EWBurials$Goods)
library(archdata)
data("EWBurials")
knitr::opts_chunk$set(echo = TRUE,
include = TRUE)
# number of Neolithic graves
nl_G <- c(10,50)
# the probability they should follow (area percentage in the working area
Vert_fl <- c(0.404,0.596)
# test is run by:
chisq.test(nl_G, p = Vert_fl)
# don't forget the "p =" as I did first! ;-)
# I'll just call the variable chi
chi <- chisq.test(nl_G, p = Vert_fl)
chi$expected
chi$p.value
library(archdata)
data("EWBurials")
#  let's look at the table
table(EWBurials$Sex, EWBurials$Goods)
# and then we feed it in the algorithm (chisq.test)
chisq.test(table(EWBurials$Sex, EWBurials$Goods))
chi2 <- chisq.test(table(EWBurials$Sex,
EWBurials$Goods))
chi2$expected
tab_A_G <- table(EWBurials$Age, EWBurials$Goods)
chi_tab_A_G <- chisq.test(tab_A_G)
chi_tab_A_G$expected
library(ggplot2)
library(ggpubr)
data("BACups")
ggqqplot(BACups$RD)
library(dplyr)
library(magrittr)
BACups %>%
filter(Phase == "Protoapennine") %>% # take only the protoapennine data
use_series(RD)%>% # take the RD column
ggqqplot() #draw the qqplot.
BACups %>%
filter(Phase == "Subapennine") %>%
use_series(RD)%>%
shapiro.test()
wilcox.test(BACups$RD[BACups$Phase == "Subapennine"],
BACups$RD[BACups$Phase == "Protoapennine"],
alternative = "two.sided")
ks.test(BACups$RD[BACups$Phase == "Subapennine"],
BACups$RD[BACups$Phase == "Protoapennine"],)
data("Fibulae")
# randomly make two groups out of them:
Fib_6c <- subset(Fibulae, Fibulae$Coils < 7)
Fib_7c <- subset(Fibulae, Fibulae$Coils > 6)
# shapiro test both groups
shapiro.test(Fib_6c$BT)
shapiro.test(Fib_7c$BT)
var.test(Fib_6c$BT,
Fib_7c$BT)
t.test(Fib_6c$BT,
Fib_7c$BT)
